{"id":"../node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js","dependencies":[{"name":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js.map","includedInParent":true,"mtime":1731153522279},{"name":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/src/enums/xrpl-definitions.ts","includedInParent":true,"mtime":1731153522559},{"name":"/Users/uthayan/XRPL/test_auth3/package.json","includedInParent":true,"mtime":1731231949110},{"name":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/package.json","includedInParent":true,"mtime":1731153522074},{"name":"./xrpl-definitions-base","loc":{"line":4,"column":40,"index":151},"parent":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js","resolved":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/dist/enums/xrpl-definitions-base.js"},{"name":"../types","loc":{"line":5,"column":24,"index":203},"parent":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/dist/enums/xrpl-definitions.js","resolved":"/Users/uthayan/XRPL/node_modules/ripple-binary-codec/dist/types/index.js"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XrplDefinitions = void 0;\nvar xrpl_definitions_base_1 = require(\"./xrpl-definitions-base\");\nvar types_1 = require(\"../types\");\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * Should be used instead of XrplDefinitionsBase since this defines default `types` for serializing/deserializing\n * ledger data.\n */\nvar XrplDefinitions = /*#__PURE__*/function (_xrpl_definitions_bas) {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.\n   *              These types will be included in addition to the coreTypes used on mainnet.\n   */\n  function XrplDefinitions(enums, additionalTypes) {\n    _classCallCheck(this, XrplDefinitions);\n    var types = Object.assign({}, types_1.coreTypes, additionalTypes);\n    return _callSuper(this, XrplDefinitions, [enums, types]);\n  }\n  _inherits(XrplDefinitions, _xrpl_definitions_bas);\n  return _createClass(XrplDefinitions);\n}(xrpl_definitions_base_1.XrplDefinitionsBase);\nexports.XrplDefinitions = XrplDefinitions;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":27}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":30}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":37}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":38}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":63}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":64}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":11}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":14}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":21}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":22}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":32}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":21,"column":33}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":22,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":27,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":13},"generated":{"line":27,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":29},"generated":{"line":27,"column":19}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":29},"generated":{"line":27,"column":45}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":29},"generated":{"line":27,"column":66}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":14,"column":2},"generated":{"line":28,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":39,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":25,"column":2},"generated":{"line":39,"column":11}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":26,"column":4},"generated":{"line":39,"column":27}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":26,"column":26},"generated":{"line":39,"column":32}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":4},"generated":{"line":39,"column":34}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":39,"column":49}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":39,"column":51}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":40,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":40,"column":19}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":40,"column":26}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":27,"column":59},"generated":{"line":40,"column":41}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":4},"generated":{"line":41,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":10},"generated":{"line":41,"column":8}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":15},"generated":{"line":41,"column":13}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":18},"generated":{"line":41,"column":16}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":41,"column":22}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":25},"generated":{"line":41,"column":23}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":31},"generated":{"line":41,"column":29}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":41,"column":30}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":32},"generated":{"line":41,"column":31}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":34},"generated":{"line":41,"column":32}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":41,"column":34}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":41,"column":41}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":41,"column":42}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":45},"generated":{"line":41,"column":51}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":47},"generated":{"line":41,"column":53}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":62},"generated":{"line":41,"column":68}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":41,"column":69}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":42,"column":4}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":42,"column":11}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":42,"column":21}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":42,"column":28}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":29,"column":63},"generated":{"line":42,"column":43}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":42,"column":46}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":30,"column":15},"generated":{"line":42,"column":51}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":30,"column":17},"generated":{"line":42,"column":53}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":30,"column":22},"generated":{"line":42,"column":58}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":2},"generated":{"line":43,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":11}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":12}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":27}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":29}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":44,"column":50}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":45,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":45,"column":9}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":45,"column":21}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":45,"column":22}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":45,"column":37}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":31,"column":3},"generated":{"line":46,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":37},"generated":{"line":46,"column":2}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":37},"generated":{"line":46,"column":25}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":37},"generated":{"line":46,"column":26}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":56},"generated":{"line":46,"column":45}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":0}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":7}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":8}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":23}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":26}},{"source":"../../src/enums/xrpl-definitions.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":47,"column":41}}],"sources":{"../../src/enums/xrpl-definitions.ts":"import {\n  type DefinitionsData,\n  XrplDefinitionsBase,\n} from './xrpl-definitions-base'\nimport { coreTypes } from '../types'\nimport { SerializedType } from '../types/serialized-type'\n\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * Should be used instead of XrplDefinitionsBase since this defines default `types` for serializing/deserializing\n * ledger data.\n */\nexport class XrplDefinitions extends XrplDefinitionsBase {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.\n   *              These types will be included in addition to the coreTypes used on mainnet.\n   */\n  constructor(\n    enums: DefinitionsData,\n    additionalTypes?: Record<string, typeof SerializedType>,\n  ) {\n    const types = Object.assign({}, coreTypes, additionalTypes)\n    super(enums, types)\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"4718869380fd681bfd219db00885a8f4","cacheData":{"env":{}}}
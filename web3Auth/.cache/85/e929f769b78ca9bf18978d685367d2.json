{"id":"../node_modules/@xrplf/isomorphic/dist/internal/normalizeInput.js","dependencies":[{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/isomorphic/dist/internal/normalizeInput.js.map","includedInParent":true,"mtime":1731153522639},{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/isomorphic/src/internal/normalizeInput.ts","includedInParent":true,"mtime":1731153522673},{"name":"/Users/uthayan/XRPL/test_auth3/package.json","includedInParent":true,"mtime":1731231949110},{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/isomorphic/package.json","includedInParent":true,"mtime":1731153522613}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Normalize a string, number array, or Uint8Array to a string or Uint8Array.\n * Both node and noble lib functions accept these types.\n *\n * @param input - value to normalize\n */\nfunction normalizeInput(input) {\n  return Array.isArray(input) ? new Uint8Array(input) : input;\n}\nexports.default = normalizeInput;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":6,"column":0}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":24},"generated":{"line":12,"column":9}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":38},"generated":{"line":12,"column":23}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":39},"generated":{"line":12,"column":24}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":51},"generated":{"line":12,"column":29}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":51},"generated":{"line":12,"column":31}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":13,"column":2}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":9},"generated":{"line":13,"column":9}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":14},"generated":{"line":13,"column":14}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":15},"generated":{"line":13,"column":15}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":22},"generated":{"line":13,"column":22}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":23},"generated":{"line":13,"column":23}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":28},"generated":{"line":13,"column":28}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":29},"generated":{"line":13,"column":29}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":32},"generated":{"line":13,"column":32}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":36},"generated":{"line":13,"column":36}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":46},"generated":{"line":13,"column":46}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":47},"generated":{"line":13,"column":47}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":52},"generated":{"line":13,"column":52}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":53},"generated":{"line":13,"column":53}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":56},"generated":{"line":13,"column":56}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":10,"column":61},"generated":{"line":13,"column":61}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":0}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":7}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":8}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":15}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":18}},{"source":"../../src/internal/normalizeInput.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":15,"column":32}}],"sources":{"../../src/internal/normalizeInput.ts":"import { Input } from './types'\n\n/**\n * Normalize a string, number array, or Uint8Array to a string or Uint8Array.\n * Both node and noble lib functions accept these types.\n *\n * @param input - value to normalize\n */\nexport default function normalizeInput(input: Input): string | Uint8Array {\n  return Array.isArray(input) ? new Uint8Array(input) : input\n}\n"},"lineCount":null}},"error":null,"hash":"354bf98f0914bb60c8d26d4fc034bdb7","cacheData":{"env":{}}}
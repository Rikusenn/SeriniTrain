{"id":"../node_modules/@xrplf/secret-numbers/dist/schema/Account.js","dependencies":[{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/dist/schema/Account.js.map","includedInParent":true,"mtime":1731153522528},{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/src/schema/Account.ts","includedInParent":true,"mtime":1731153522663},{"name":"/Users/uthayan/XRPL/test_auth3/package.json","includedInParent":true,"mtime":1731231949110},{"name":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/package.json","includedInParent":true,"mtime":1731153522526},{"name":"ripple-keypairs","loc":{"line":4,"column":34,"index":137},"parent":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/dist/schema/Account.js","resolved":"/Users/uthayan/XRPL/node_modules/ripple-keypairs/dist/index.js"},{"name":"../utils","loc":{"line":5,"column":24,"index":181},"parent":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/dist/schema/Account.js","resolved":"/Users/uthayan/XRPL/node_modules/@xrplf/secret-numbers/dist/utils/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst ripple_keypairs_1 = require(\"ripple-keypairs\");\nconst utils_1 = require(\"../utils\");\nclass Account {\n    constructor(secretNumbers) {\n        this._account = {\n            familySeed: '',\n            address: '',\n            keypair: {\n                publicKey: '',\n                privateKey: '',\n            },\n        };\n        if (typeof secretNumbers === 'string') {\n            this._secret = (0, utils_1.parseSecretString)(secretNumbers);\n        }\n        else if (Array.isArray(secretNumbers)) {\n            this._secret = secretNumbers;\n        }\n        else if (secretNumbers instanceof Uint8Array) {\n            this._secret = (0, utils_1.entropyToSecret)(secretNumbers);\n        }\n        else {\n            this._secret = (0, utils_1.randomSecret)();\n        }\n        validateLengths(this._secret);\n        this.derive();\n    }\n    getSecret() {\n        return this._secret;\n    }\n    getSecretString() {\n        return this._secret.join(' ');\n    }\n    getAddress() {\n        return this._account.address;\n    }\n    getFamilySeed() {\n        return this._account.familySeed;\n    }\n    getKeypair() {\n        return this._account.keypair;\n    }\n    toString() {\n        return this.getSecretString();\n    }\n    derive() {\n        try {\n            const entropy = (0, utils_1.secretToEntropy)(this._secret);\n            this._account.familySeed = (0, ripple_keypairs_1.generateSeed)({ entropy });\n            this._account.keypair = (0, ripple_keypairs_1.deriveKeypair)(this._account.familySeed);\n            this._account.address = (0, ripple_keypairs_1.deriveAddress)(this._account.keypair.publicKey);\n        }\n        catch (error) {\n            let message = 'Unknown Error';\n            if (error instanceof Error) {\n                message = error.message;\n            }\n            throw new Error(message);\n        }\n    }\n}\nexports.Account = Account;\nfunction validateLengths(secretNumbers) {\n    if (secretNumbers.length !== 8) {\n        throw new Error('Secret must have 8 numbers');\n    }\n    secretNumbers.forEach((num) => {\n        if (num.length !== 6) {\n            throw new Error('Each secret number must be 6 digits');\n        }\n    });\n}\n"},"sourceMaps":{"js":{"version":3,"file":"Account.js","sourceRoot":"","sources":["../../src/schema/Account.ts"],"names":[],"mappings":";;;AAAA,qDAA4E;AAE5E,oCAKiB;AAiBjB,MAAa,OAAO;IAWlB,YAAY,aAA8C;QATzC,aAAQ,GAAgB;YACvC,UAAU,EAAE,EAAE;YACd,OAAO,EAAE,EAAE;YACX,OAAO,EAAE;gBACP,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,EAAE;aACf;SACF,CAAA;QAGC,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACrC,IAAI,CAAC,OAAO,GAAG,IAAA,yBAAiB,EAAC,aAAa,CAAC,CAAA;SAChD;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACvC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAA;SAC7B;aAAM,IAAI,aAAa,YAAY,UAAU,EAAE;YAC9C,IAAI,CAAC,OAAO,GAAG,IAAA,uBAAe,EAAC,aAAa,CAAC,CAAA;SAC9C;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,IAAA,oBAAY,GAAE,CAAA;SAC9B;QAED,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC7B,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC/B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAA;IAC9B,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAA;IACjC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAA;IAC9B,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,eAAe,EAAE,CAAA;IAC/B,CAAC;IAEO,MAAM;QACZ,IAAI;YACF,MAAM,OAAO,GAAG,IAAA,uBAAe,EAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC7C,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAA,8BAAY,EAAC,EAAE,OAAO,EAAE,CAAC,CAAA;YACpD,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAA,+BAAa,EAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;YAC/D,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAA,+BAAa,EAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;SACvE;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,OAAO,GAAG,eAAe,CAAA;YAC7B,IAAI,KAAK,YAAY,KAAK,EAAE;gBAC1B,OAAO,GAAG,KAAK,CAAC,OAAO,CAAA;aACxB;YAED,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA;SACzB;IACH,CAAC;CACF;AAjED,0BAiEC;AAED,SAAS,eAAe,CAAC,aAAuB;IAC9C,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;KAC9C;IACD,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAC5B,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;SACvD;IACH,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import { deriveAddress, deriveKeypair, generateSeed } from 'ripple-keypairs'\n\nimport {\n  entropyToSecret,\n  parseSecretString,\n  randomSecret,\n  secretToEntropy,\n} from '../utils'\n\n/* Types ==================================================================== */\n\nexport interface Keypair {\n  publicKey: string\n  privateKey: string\n}\n\ninterface AccountData {\n  familySeed: string\n  address: string\n  keypair: Keypair\n}\n\n/* Class ==================================================================== */\n\nexport class Account {\n  private readonly _secret: string[]\n  private readonly _account: AccountData = {\n    familySeed: '',\n    address: '',\n    keypair: {\n      publicKey: '',\n      privateKey: '',\n    },\n  }\n\n  constructor(secretNumbers?: string[] | string | Uint8Array) {\n    if (typeof secretNumbers === 'string') {\n      this._secret = parseSecretString(secretNumbers)\n    } else if (Array.isArray(secretNumbers)) {\n      this._secret = secretNumbers\n    } else if (secretNumbers instanceof Uint8Array) {\n      this._secret = entropyToSecret(secretNumbers)\n    } else {\n      this._secret = randomSecret()\n    }\n\n    validateLengths(this._secret)\n    this.derive()\n  }\n\n  getSecret(): string[] {\n    return this._secret\n  }\n\n  getSecretString(): string {\n    return this._secret.join(' ')\n  }\n\n  getAddress(): string {\n    return this._account.address\n  }\n\n  getFamilySeed(): string {\n    return this._account.familySeed\n  }\n\n  getKeypair(): Keypair {\n    return this._account.keypair\n  }\n\n  toString(): string {\n    return this.getSecretString()\n  }\n\n  private derive(): void {\n    try {\n      const entropy = secretToEntropy(this._secret)\n      this._account.familySeed = generateSeed({ entropy })\n      this._account.keypair = deriveKeypair(this._account.familySeed)\n      this._account.address = deriveAddress(this._account.keypair.publicKey)\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) {\n        message = error.message\n      }\n      // we'll proceed, but let's report it\n      throw new Error(message)\n    }\n  }\n}\n\nfunction validateLengths(secretNumbers: string[]): void {\n  if (secretNumbers.length !== 8) {\n    throw new Error('Secret must have 8 numbers')\n  }\n  secretNumbers.forEach((num) => {\n    if (num.length !== 6) {\n      throw new Error('Each secret number must be 6 digits')\n    }\n  })\n}\n"]}},"error":null,"hash":"aee989862f9828d409a5069f439a0aec","cacheData":{"env":{}}}
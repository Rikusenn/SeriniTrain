{"id":"node_modules/@metamask/utils/dist/assert.js","dependencies":[{"name":"/Users/uthayan/XRPL/test_auth3/node_modules/@metamask/utils/dist/assert.js.map","includedInParent":true,"mtime":1731231096835},{"name":"/Users/uthayan/XRPL/test_auth3/package.json","includedInParent":true,"mtime":1731231949110},{"name":"/Users/uthayan/XRPL/test_auth3/node_modules/@metamask/utils/package.json","includedInParent":true,"mtime":1731231098684},{"name":"superstruct","loc":{"line":4,"column":30,"index":207},"parent":"/Users/uthayan/XRPL/test_auth3/node_modules/@metamask/utils/dist/assert.js","resolved":"/Users/uthayan/XRPL/test_auth3/node_modules/@metamask/utils/node_modules/superstruct/dist/index.mjs"}],"generated":{"js":"\"use strict\";\n\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nvar superstruct_1 = require(\"superstruct\");\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error) {\n  return _typeof(error) === 'object' && error !== null && 'message' in error;\n}\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n  var _a, _b;\n  /* istanbul ignore next */\n  return Boolean(typeof ((_b = (_a = fn === null || fn === void 0 ? void 0 : fn.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === 'string');\n}\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error) {\n  var message = isErrorWithMessage(error) ? error.message : String(error);\n  // If the error ends with a period, remove it, as we'll add our own period.\n  if (message.endsWith('.')) {\n    return message.slice(0, -1);\n  }\n  return message;\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n  if (isConstructable(ErrorWrapper)) {\n    return new ErrorWrapper({\n      message: message\n    });\n  }\n  return ErrorWrapper({\n    message: message\n  });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nvar AssertionError = /*#__PURE__*/function (_Error) {\n  function AssertionError(options) {\n    var _this;\n    _classCallCheck(this, AssertionError);\n    _this = _callSuper(this, AssertionError, [options.message]);\n    _this.code = 'ERR_ASSERTION';\n    return _this;\n  }\n  _inherits(AssertionError, _Error);\n  return _createClass(AssertionError);\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value) {\n  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Assertion failed.';\n  var ErrorWrapper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AssertionError;\n  if (!value) {\n    if (message instanceof Error) {\n      throw message;\n    }\n    throw getError(ErrorWrapper, message);\n  }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct) {\n  var errorPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Assertion failed';\n  var ErrorWrapper = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AssertionError;\n  try {\n    (0, superstruct_1.assert)(value, struct);\n  } catch (error) {\n    throw getError(ErrorWrapper, \"\".concat(errorPrefix, \": \").concat(getErrorMessage(error), \".\"));\n  }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n  throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":20}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":41}},{"source":"../src/assert.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":23,"column":42}},{"source":"../src/assert.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":24,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":31,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":9},"generated":{"line":31,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":27},"generated":{"line":31,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":28},"generated":{"line":31,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":42},"generated":{"line":31,"column":33}},{"source":"../src/assert.ts","name":null,"original":{"line":14,"column":42},"generated":{"line":31,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":2},"generated":{"line":32,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":9},"generated":{"line":32,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":9},"generated":{"line":32,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":16},"generated":{"line":32,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":21},"generated":{"line":32,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":26},"generated":{"line":32,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":34},"generated":{"line":32,"column":36}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":38},"generated":{"line":32,"column":40}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":43},"generated":{"line":32,"column":45}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":48},"generated":{"line":32,"column":50}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":52},"generated":{"line":32,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":56},"generated":{"line":32,"column":58}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":65},"generated":{"line":32,"column":67}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":69},"generated":{"line":32,"column":71}},{"source":"../src/assert.ts","name":null,"original":{"line":15,"column":74},"generated":{"line":32,"column":76}},{"source":"../src/assert.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":33,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":34,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":41,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":25,"column":9},"generated":{"line":41,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":25,"column":24},"generated":{"line":41,"column":24}},{"source":"../src/assert.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":41,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":26,"column":31},"generated":{"line":41,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":26,"column":31},"generated":{"line":41,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":43,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":44,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":9},"generated":{"line":44,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":16},"generated":{"line":44,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":17},"generated":{"line":44,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":34}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":39}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":44}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":48}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":52}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":59}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":64}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":65}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":68}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":73}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":74}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":44,"column":77}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":26},"generated":{"line":44,"column":79}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":28},"generated":{"line":44,"column":80}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":89}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":95}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":99}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":103}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":105}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":110}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":115}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":116}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":119}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":124}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":125}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":128}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":37},"generated":{"line":44,"column":130}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":39},"generated":{"line":44,"column":131}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":142}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":148}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":152}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":156}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":158}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":163}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":168}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":169}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":172}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":177}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":178}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":181}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":50},"generated":{"line":44,"column":183}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":52},"generated":{"line":44,"column":184}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":56},"generated":{"line":44,"column":188}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":56},"generated":{"line":44,"column":189}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":61},"generated":{"line":44,"column":194}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":69},"generated":{"line":44,"column":202}},{"source":"../src/assert.ts","name":null,"original":{"line":29,"column":70},"generated":{"line":44,"column":203}},{"source":"../src/assert.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":45,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":46,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":0},"generated":{"line":54,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":9},"generated":{"line":54,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":24},"generated":{"line":54,"column":24}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":25},"generated":{"line":54,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":54,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":40,"column":39},"generated":{"line":54,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":2},"generated":{"line":55,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":8},"generated":{"line":55,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":15},"generated":{"line":55,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":18},"generated":{"line":55,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":36},"generated":{"line":55,"column":34}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":37},"generated":{"line":55,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":42},"generated":{"line":55,"column":40}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":43},"generated":{"line":55,"column":41}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":46},"generated":{"line":55,"column":44}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":51},"generated":{"line":55,"column":49}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":52},"generated":{"line":55,"column":50}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":59},"generated":{"line":55,"column":57}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":62},"generated":{"line":55,"column":60}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":68},"generated":{"line":55,"column":66}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":69},"generated":{"line":55,"column":67}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":74},"generated":{"line":55,"column":72}},{"source":"../src/assert.ts","name":null,"original":{"line":41,"column":75},"generated":{"line":55,"column":73}},{"source":"../src/assert.ts","name":null,"original":{"line":43,"column":2},"generated":{"line":56,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":2},"generated":{"line":57,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":6},"generated":{"line":57,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":13},"generated":{"line":57,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":14},"generated":{"line":57,"column":14}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":22},"generated":{"line":57,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":23},"generated":{"line":57,"column":23}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":26},"generated":{"line":57,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":27},"generated":{"line":57,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":44,"column":29},"generated":{"line":57,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":4},"generated":{"line":58,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":11},"generated":{"line":58,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":18},"generated":{"line":58,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":19},"generated":{"line":58,"column":19}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":24},"generated":{"line":58,"column":24}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":25},"generated":{"line":58,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":26},"generated":{"line":58,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":28},"generated":{"line":58,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":29},"generated":{"line":58,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":30},"generated":{"line":58,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":45,"column":31},"generated":{"line":58,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":48,"column":2},"generated":{"line":60,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":48,"column":9},"generated":{"line":60,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":48,"column":16},"generated":{"line":60,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":61,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":62,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":58,"column":0},"generated":{"line":69,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":70,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":9},"generated":{"line":70,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":17},"generated":{"line":70,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":18},"generated":{"line":70,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":57},"generated":{"line":70,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":59},"generated":{"line":70,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":74},"generated":{"line":70,"column":39}},{"source":"../src/assert.ts","name":null,"original":{"line":59,"column":74},"generated":{"line":70,"column":41}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":71,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":71,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":21},"generated":{"line":71,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":22},"generated":{"line":71,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":34},"generated":{"line":71,"column":34}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":35},"generated":{"line":71,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":60,"column":37},"generated":{"line":71,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":61,"column":4},"generated":{"line":72,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":61,"column":11},"generated":{"line":72,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":61,"column":15},"generated":{"line":72,"column":15}},{"source":"../src/assert.ts","name":null,"original":{"line":61,"column":27},"generated":{"line":72,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":61,"column":28},"generated":{"line":72,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":73,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":73,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":62,"column":6},"generated":{"line":73,"column":15}},{"source":"../src/assert.ts","name":null,"original":{"line":63,"column":5},"generated":{"line":74,"column":5}},{"source":"../src/assert.ts","name":null,"original":{"line":63,"column":6},"generated":{"line":74,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":76,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":76,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":65,"column":21},"generated":{"line":76,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":65,"column":22},"generated":{"line":76,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":77,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":66,"column":11},"generated":{"line":77,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":66,"column":4},"generated":{"line":77,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":67,"column":3},"generated":{"line":78,"column":3}},{"source":"../src/assert.ts","name":null,"original":{"line":67,"column":4},"generated":{"line":78,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":79,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":80,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":83,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":13},"generated":{"line":83,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":28},"generated":{"line":83,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":28},"generated":{"line":83,"column":44}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":28},"generated":{"line":83,"column":50}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":84,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":84,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":14},"generated":{"line":84,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":84,"column":33}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":84,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":85,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":85,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":85,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":86,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":86,"column":19}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":86,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":76,"column":42},"generated":{"line":86,"column":40}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":12}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":4},"generated":{"line":87,"column":43}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":10},"generated":{"line":87,"column":46}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":17},"generated":{"line":87,"column":53}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":18},"generated":{"line":87,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":77,"column":25},"generated":{"line":87,"column":61}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":88,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":88,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":11},"generated":{"line":88,"column":10}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":15},"generated":{"line":88,"column":14}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":18},"generated":{"line":88,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":33},"generated":{"line":88,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":34},"generated":{"line":89,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":34},"generated":{"line":89,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":74,"column":34},"generated":{"line":89,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":90,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":12}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":91,"column":34}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":92,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":92,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":92,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":92,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":92,"column":36}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":93,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":93,"column":15}},{"source":"../src/assert.ts","name":null,"original":{"line":78,"column":3},"generated":{"line":93,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":36},"generated":{"line":93,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":41},"generated":{"line":93,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":7}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":94,"column":39}},{"source":"../src/assert.ts","name":null,"original":{"line":81,"column":0},"generated":{"line":95,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":107,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":16},"generated":{"line":107,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":22},"generated":{"line":107,"column":15}},{"source":"../src/assert.ts","name":null,"original":{"line":94,"column":2},"generated":{"line":107,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":94,"column":12},"generated":{"line":107,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":58},"generated":{"line":107,"column":23}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":58},"generated":{"line":108,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":13}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":40}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":49}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":57}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":66}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":69}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":2},"generated":{"line":108,"column":78}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":28},"generated":{"line":108,"column":84}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":47},"generated":{"line":108,"column":103}},{"source":"../src/assert.ts","name":null,"original":{"line":95,"column":47},"generated":{"line":109,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":45}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":62}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":71}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":74}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":109,"column":83}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":44},"generated":{"line":109,"column":89}},{"source":"../src/assert.ts","name":null,"original":{"line":97,"column":58},"generated":{"line":109,"column":103}},{"source":"../src/assert.ts","name":null,"original":{"line":99,"column":2},"generated":{"line":110,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":99,"column":6},"generated":{"line":110,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":99,"column":7},"generated":{"line":110,"column":7}},{"source":"../src/assert.ts","name":null,"original":{"line":99,"column":12},"generated":{"line":110,"column":12}},{"source":"../src/assert.ts","name":null,"original":{"line":99,"column":14},"generated":{"line":110,"column":14}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":4},"generated":{"line":111,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":8},"generated":{"line":111,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":15},"generated":{"line":111,"column":15}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":27},"generated":{"line":111,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":32},"generated":{"line":111,"column":32}},{"source":"../src/assert.ts","name":null,"original":{"line":100,"column":34},"generated":{"line":111,"column":34}},{"source":"../src/assert.ts","name":null,"original":{"line":101,"column":6},"generated":{"line":112,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":101,"column":12},"generated":{"line":112,"column":12}},{"source":"../src/assert.ts","name":null,"original":{"line":101,"column":19},"generated":{"line":112,"column":19}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":4},"generated":{"line":114,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":10},"generated":{"line":114,"column":10}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":18},"generated":{"line":114,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":19},"generated":{"line":114,"column":19}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":31},"generated":{"line":114,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":33},"generated":{"line":114,"column":33}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":40},"generated":{"line":114,"column":40}},{"source":"../src/assert.ts","name":null,"original":{"line":104,"column":41},"generated":{"line":114,"column":41}},{"source":"../src/assert.ts","name":null,"original":{"line":106,"column":0},"generated":{"line":116,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":7}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":14}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":117,"column":23}},{"source":"../src/assert.ts","name":null,"original":{"line":108,"column":0},"generated":{"line":118,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":129,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":16},"generated":{"line":129,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":28},"generated":{"line":129,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":120,"column":2},"generated":{"line":129,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":120,"column":16},"generated":{"line":129,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":121,"column":2},"generated":{"line":129,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":121,"column":22},"generated":{"line":129,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":58},"generated":{"line":129,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":58},"generated":{"line":130,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":2},"generated":{"line":130,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":20}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":29}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":36}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":44}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":53}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":61}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":70}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":73}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":13},"generated":{"line":130,"column":82}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":16},"generated":{"line":130,"column":88}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":34},"generated":{"line":130,"column":106}},{"source":"../src/assert.ts","name":null,"original":{"line":122,"column":34},"generated":{"line":131,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":45}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":62}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":71}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":74}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":2},"generated":{"line":131,"column":83}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":44},"generated":{"line":131,"column":89}},{"source":"../src/assert.ts","name":null,"original":{"line":124,"column":58},"generated":{"line":131,"column":103}},{"source":"../src/assert.ts","name":null,"original":{"line":126,"column":2},"generated":{"line":132,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":126,"column":6},"generated":{"line":132,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":5}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":6}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":21}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":4},"generated":{"line":133,"column":22}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":21},"generated":{"line":133,"column":28}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":22},"generated":{"line":133,"column":30}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":27},"generated":{"line":133,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":29},"generated":{"line":133,"column":37}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":35},"generated":{"line":133,"column":43}},{"source":"../src/assert.ts","name":null,"original":{"line":127,"column":36},"generated":{"line":133,"column":44}},{"source":"../src/assert.ts","name":null,"original":{"line":128,"column":3},"generated":{"line":134,"column":3}},{"source":"../src/assert.ts","name":null,"original":{"line":128,"column":4},"generated":{"line":134,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":128,"column":11},"generated":{"line":134,"column":11}},{"source":"../src/assert.ts","name":null,"original":{"line":128,"column":16},"generated":{"line":134,"column":16}},{"source":"../src/assert.ts","name":null,"original":{"line":128,"column":18},"generated":{"line":134,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":4},"generated":{"line":135,"column":4}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":10},"generated":{"line":135,"column":10}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":18},"generated":{"line":135,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":19},"generated":{"line":135,"column":19}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":31},"generated":{"line":135,"column":31}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":31},"generated":{"line":135,"column":36}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":31},"generated":{"line":135,"column":42}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":36},"generated":{"line":135,"column":43}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":47},"generated":{"line":135,"column":54}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":47},"generated":{"line":135,"column":62}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":47},"generated":{"line":135,"column":68}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":52},"generated":{"line":135,"column":69}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":67},"generated":{"line":135,"column":84}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":68},"generated":{"line":135,"column":85}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":73},"generated":{"line":135,"column":90}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":74},"generated":{"line":135,"column":91}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":77},"generated":{"line":135,"column":97}},{"source":"../src/assert.ts","name":null,"original":{"line":129,"column":78},"generated":{"line":135,"column":98}},{"source":"../src/assert.ts","name":null,"original":{"line":131,"column":0},"generated":{"line":137,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":7}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":20}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":23}},{"source":"../src/assert.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":138,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":133,"column":0},"generated":{"line":139,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":158,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":16},"generated":{"line":158,"column":9}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":32},"generated":{"line":158,"column":25}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":33},"generated":{"line":158,"column":26}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":47},"generated":{"line":158,"column":33}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":47},"generated":{"line":158,"column":35}},{"source":"../src/assert.ts","name":null,"original":{"line":153,"column":2},"generated":{"line":159,"column":2}},{"source":"../src/assert.ts","name":null,"original":{"line":153,"column":8},"generated":{"line":159,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":153,"column":12},"generated":{"line":159,"column":12}},{"source":"../src/assert.ts","name":null,"original":{"line":153,"column":17},"generated":{"line":159,"column":17}},{"source":"../src/assert.ts","name":null,"original":{"line":154,"column":4},"generated":{"line":159,"column":18}},{"source":"../src/assert.ts","name":null,"original":{"line":154,"column":68},"generated":{"line":159,"column":82}},{"source":"../src/assert.ts","name":null,"original":{"line":155,"column":3},"generated":{"line":159,"column":83}},{"source":"../src/assert.ts","name":null,"original":{"line":156,"column":0},"generated":{"line":160,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":0}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":7}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":8}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":24}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":27}},{"source":"../src/assert.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":161,"column":43}}],"sources":{"../src/assert.ts":"import { assert as assertSuperstruct, Struct } from 'superstruct';\n\nexport type AssertionErrorConstructor =\n  | (new (args: { message: string }) => Error)\n  | ((args: { message: string }) => Error);\n\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns True or false, depending on the result.\n */\nfunction isErrorWithMessage(error: unknown): error is { message: string } {\n  return typeof error === 'object' && error !== null && 'message' in error;\n}\n\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(\n  fn: AssertionErrorConstructor,\n): fn is new (args: { message: string }) => Error {\n  /* istanbul ignore next */\n  return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n\n/**\n * Get the error message from an unknown error object. If the error object has\n * a `message` property, that property is returned. Otherwise, the stringified\n * error object is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The error message.\n */\nfunction getErrorMessage(error: unknown): string {\n  const message = isErrorWithMessage(error) ? error.message : String(error);\n\n  // If the error ends with a period, remove it, as we'll add our own period.\n  if (message.endsWith('.')) {\n    return message.slice(0, -1);\n  }\n\n  return message;\n}\n\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper: AssertionErrorConstructor, message: string) {\n  if (isConstructable(ErrorWrapper)) {\n    return new ErrorWrapper({\n      message,\n    });\n  }\n  return ErrorWrapper({\n    message,\n  });\n}\n\n/**\n * The default error class that is thrown if an assertion fails.\n */\nexport class AssertionError extends Error {\n  readonly code = 'ERR_ASSERTION';\n\n  constructor(options: { message: string }) {\n    super(options.message);\n  }\n}\n\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nexport function assert(\n  value: any,\n  message: string | Error = 'Assertion failed.',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper: AssertionErrorConstructor = AssertionError,\n): asserts value {\n  if (!value) {\n    if (message instanceof Error) {\n      throw message;\n    }\n\n    throw getError(ErrorWrapper, message);\n  }\n}\n\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nexport function assertStruct<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  errorPrefix = 'Assertion failed',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper: AssertionErrorConstructor = AssertionError,\n): asserts value is T {\n  try {\n    assertSuperstruct(value, struct);\n  } catch (error) {\n    throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessage(error)}.`);\n  }\n}\n\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nexport function assertExhaustive(_object: never): never {\n  throw new Error(\n    'Invalid branch reached. Should be detected during compilation.',\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"5b138c4296ffaf5fff392d202c2189fe","cacheData":{"env":{}}}